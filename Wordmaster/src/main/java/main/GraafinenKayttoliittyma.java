package main;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import wordmaster.Anagrammi;
import wordmaster.Sana;

public class GraafinenKayttoliittyma extends javax.swing.JFrame implements ActionListener {

    static TiedostonLukija tl;
    Anagrammi anagrammi;
    int vihjeet;
    int sananPituus;
    String anagrammiSana;
    Sana anagrammiksiMuutettava;
    String vihjeteksti;

    /**
     * Creates new form GraafinenKayttoliittyma
     */
    public GraafinenKayttoliittyma() throws FileNotFoundException, Exception {
        initComponents();
        anagrammiKentta.setText("");
        vastaaNappi.addActionListener(this);
        vastaus.addActionListener(this);
        vihjeNappi.addActionListener(this);
        lopetaNappi.addActionListener(this);
        uudelleenNappi.addActionListener(this);
        this.tl = new TiedostonLukija(); // luodaan uusi Tiedostonlukija-olio
        tl.lueTiedosto();
        this.anagrammi = new Anagrammi();
        this.vihjeet = 0;
        this.sananPituus = 0;
        aloita();

    }

    public void aloita() {
        vihjeet = 1;
        vastaus.setText("");
        tuomioKentta.setText("");
        vastaus.setVisible(true);
        uudelleenNappi.setVisible(false);
        vihjeNappi.setVisible(true);
        vastaaNappi.setVisible(true);
        vihjeita.setVisible(true);
        anagrammiksiMuutettava = tl.sanasto.luoRandomSana();
        String anagrammiSana = anagrammi.aloita(anagrammiksiMuutettava);
        sananPituus = anagrammiSana.length();
        anagrammiKentta.setText(anagrammiSana);
        vihjeteksti = Character.toString(anagrammiksiMuutettava.getSana().charAt(0));
        vihje.setText("Sana alkaa " + vihjeteksti);
        vihjeita.setText("Vihjeet " + vihjeet + ", sanan pituus " + sananPituus);

    }

    public void actionPerformed(ActionEvent e) {

        if (e.getSource().equals(vastaaNappi)) {
            tuomioKentta.setText("");

            if (Anagrammi.ovatkoAnagrammeja(vastaus.getText(), anagrammiksiMuutettava.getSana())) {

                anagrammiKentta.setText("");
                vihje.setText("");
                tuomioKentta.setText("Oikein!");
                vihjeNappi.setVisible(false);
                vastaus.setVisible(false);
                vastaaNappi.setVisible(false);
                uudelleenNappi.setVisible(true);
                otsikko.setVisible(false);
                repaint();
            } else {
                tuomioKentta.setText("Väärin! Yritä vielä!");
            }
        }

        if (e.getSource().equals(vihjeNappi)) {
            tuomioKentta.setText("");
            vastaus.setText("");
            vihjeet++;

            if (vihjeet == sananPituus) {
                vastaus.setVisible(false);
                vihje.setText("Sana on " + anagrammiksiMuutettava);
                vihjeNappi.setVisible(false);
                vastaaNappi.setVisible(false);
                vihjeita.setVisible(false);
                uudelleenNappi.setVisible(true);

            } else {

                vihjeteksti = vihjeteksti + Character.toString(anagrammiksiMuutettava.getSana().charAt(vihjeet - 1));
                vihje.setText("Sana alkaa " + vihjeteksti);
                vihjeita.setText("Vihjeet " + vihjeet + ", sanan pituus " + sananPituus);
                repaint();
            }
        }

        if (e.getSource().equals(uudelleenNappi)) {
            aloita();
        }

        if (e.getSource().equals(lopetaNappi)) {
            vihjeNappi.setVisible(false);
            vastaaNappi.setVisible(false);
            uudelleenNappi.setVisible(false);
            lopetaNappi.setVisible(false);
            anagrammiKentta.setVisible(false);
            vastaus.setVisible(false);
            vihjeita.setVisible(false);
            otsikko.setVisible(false);
            vihje.setVisible(false);
            tuomioKentta.setText("Kiitos ja näkemiin!");
            repaint();
            ;
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        otsikko = new javax.swing.JLabel();
        vastaaNappi = new javax.swing.JButton();
        vastaus = new javax.swing.JFormattedTextField();
        vihjeNappi = new javax.swing.JButton();
        lopetaNappi = new javax.swing.JButton();
        anagrammiKentta = new javax.swing.JLabel();
        vihje = new javax.swing.JLabel();
        tuomioKentta = new javax.swing.JLabel();
        uudelleenNappi = new javax.swing.JButton();
        vihjeita = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        otsikko.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        otsikko.setText("Minkä sanan anagrammi on...");

        vastaaNappi.setText("Vastaa");

        vastaus.setColumns(10);
        vastaus.setText("Vastaus");

        vihjeNappi.setText("Seuraava kirjain");

        lopetaNappi.setText("Lopeta");

        anagrammiKentta.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        anagrammiKentta.setText("anagrammi");

        vihje.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        vihje.setText("vihje");

        tuomioKentta.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        tuomioKentta.setText("tuomio");

        uudelleenNappi.setText("Uudelleen");
        uudelleenNappi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uudelleenNappiActionPerformed(evt);
            }
        });

        vihjeita.setText("vihjeita");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(anagrammiKentta)
                    .addComponent(otsikko)
                    .addComponent(vihje)
                    .addComponent(tuomioKentta)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(vastaaNappi)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(vihjeNappi))
                            .addComponent(vastaus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(vihjeita)
                            .addComponent(lopetaNappi))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uudelleenNappi)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(otsikko)
                .addGap(7, 7, 7)
                .addComponent(anagrammiKentta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vihje)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vastaus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vihjeita))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vastaaNappi)
                    .addComponent(vihjeNappi)
                    .addComponent(lopetaNappi)
                    .addComponent(uudelleenNappi))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tuomioKentta)
                .addGap(0, 127, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void uudelleenNappiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uudelleenNappiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uudelleenNappiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws FileNotFoundException, Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraafinenKayttoliittyma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraafinenKayttoliittyma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraafinenKayttoliittyma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraafinenKayttoliittyma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new GraafinenKayttoliittyma().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(GraafinenKayttoliittyma.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel anagrammiKentta;
    private javax.swing.JButton lopetaNappi;
    private javax.swing.JLabel otsikko;
    private javax.swing.JLabel tuomioKentta;
    private javax.swing.JButton uudelleenNappi;
    private javax.swing.JButton vastaaNappi;
    private javax.swing.JFormattedTextField vastaus;
    private javax.swing.JLabel vihje;
    private javax.swing.JButton vihjeNappi;
    private javax.swing.JLabel vihjeita;
    // End of variables declaration//GEN-END:variables

}
